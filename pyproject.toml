[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mcp-server-anime"
version = "0.2.1"
description = "Model Context Protocol server for accessing anime data through AniDB HTTP API"
authors = ["MCP Server Anime <mcp-server-anime@jamesconner.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/example/mcp-server-anime"
repository = "https://github.com/example/mcp-server-anime"
documentation = "https://mcp-server-anime.readthedocs.io"
keywords = ["mcp", "anime", "anidb", "api", "server", "model-context-protocol", "kiro"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Communications :: Chat",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
packages = [{include = "mcp_server_anime", from = "src"}]
include = [
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]
exclude = [
    "tests/",
    "docs/",
    "scripts/",
    ".github/",
    ".pytest_cache/",
    ".mypy_cache/",
    ".ruff_cache/",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    "__pycache__/",
]

[tool.poetry.dependencies]
python = "^3.12"
mcp = "^1.0.0"
httpx = "^0.28.0"
pydantic = "^2.11.0"
lxml = "^5.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^1.1.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.12.0"
respx = "^0.20.0"
ruff = "^0.12.0"
mypy = "^1.8.0"
bandit = "^1.8.0"
pre-commit = "^4.0.0"
detect-secrets = "^1.5.0"

[tool.poetry.scripts]
mcp-server-anime = "mcp_server_anime.server:main"

# Test execution scripts
test-all = "scripts.test_commands:test_all"
test-unit = "scripts.test_commands:test_unit"
test-integration = "scripts.test_commands:test_integration"
test-coverage = "scripts.test_commands:test_coverage"
test-coverage-unit = "scripts.test_commands:test_coverage_unit"
test-fast = "scripts.test_commands:test_fast"
test-verbose = "scripts.test_commands:test_verbose"
test-quiet = "scripts.test_commands:test_quiet"
test-failing = "scripts.test_commands:test_failing"
test-isolation = "scripts.test_commands:test_isolation"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/jamesbconner/mcp-server-anime/issues"
"Changelog" = "https://github.com/jamesbconner/mcp-server-anime/blob/main/CHANGELOG.md"
"Documentation" = "https://mcp-server-anime.readthedocs.io"
"Source Code" = "https://github.com/jamesbconner/mcp-server-anime"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.isort]
known-first-party = ["mcp_server_anime"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_subclassing_any = true
no_implicit_optional = true
strict_equality = true
strict_concatenate = true
extra_checks = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "lxml.*",
    "httpx.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--cov=src/mcp_server_anime",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--tb=short",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for basic functionality",
]
filterwarnings = [
    "ignore:ast.Str is deprecated:DeprecationWarning",
    "ignore:ast.Constant is deprecated:DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::DeprecationWarning:httpx.*",
    "ignore::DeprecationWarning:asyncio.*",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/mcp_server_anime"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/.venv/*",
]
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
fail_under = 90.0
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "\\.\\.\\.",
    "pass",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "htmlcov"
title = "MCP Server Anime Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
targets = ["src/mcp_server_anime"]
exclude_dirs = ["tests", "docs", "scripts", ".venv", "venv", "__pycache__"]
skips = [
    "B101",  # assert_used - replaced with runtime validation (ValidationError)
    "B110",  # try_except_pass - replaced with proper logging
    "B324",  # hashlib_new_insecure_functions - MD5 used for cache keys only (usedforsecurity=False)
    "B601",  # paramiko_calls - not applicable
    "B603",  # subprocess_without_shell_equals_true - we don't use subprocess
]
severity = "medium"
confidence = "medium"

# Note: Remaining B608 (hardcoded_sql_expressions) issues are false positives
# All table names are validated through TableNameValidator before query construction
# in both security.py and index_optimization.py

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle", 
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]