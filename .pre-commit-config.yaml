# Pre-commit configuration for automated code quality checks
# See https://pre-commit.com for more information

repos:
  # Ruff for linting and formatting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.11
    hooks:
      - id: ruff
        name: ruff-lint
        description: Run ruff linter
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi]
      - id: ruff-format
        name: ruff-format
        description: Run ruff formatter
        types_or: [python, pyi]

  # MyPy for type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: mypy-src
        description: Run mypy type checker on source code
        files: ^src/
        additional_dependencies:
          - types-lxml
          - types-requests
          - pydantic
          - httpx
        args: [--config-file=pyproject.toml]

  # Bandit for security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.0
    hooks:
      - id: bandit
        name: bandit-security
        description: Run bandit security linter
        args: [-c, pyproject.toml]
        additional_dependencies: [bandit[toml]]

  # Built-in pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: trim-whitespace
        description: Trim trailing whitespace
      - id: end-of-file-fixer
        name: fix-eof
        description: Ensure files end with newline
      - id: check-yaml
        name: check-yaml
        description: Check YAML syntax
      - id: check-toml
        name: check-toml
        description: Check TOML syntax
      - id: check-json
        name: check-json
        description: Check JSON syntax
      - id: check-xml
        name: check-xml
        description: Check XML syntax
      - id: check-merge-conflict
        name: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-case-conflict
        name: check-case-conflict
        description: Check for case conflicts
      - id: check-docstring-first
        name: check-docstring-first
        description: Check docstring is first in Python files
      - id: check-executables-have-shebangs
        name: check-executables-have-shebangs
        description: Check executables have shebangs
      - id: check-shebang-scripts-are-executable
        name: check-shebang-scripts-are-executable
        description: Check shebang scripts are executable
      - id: debug-statements
        name: debug-statements
        description: Check for debugger imports and breakpoints
      - id: name-tests-test
        name: name-tests-test
        description: Ensure test files are named correctly
        args: [--pytest-test-first]

  # Check for common security issues
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: detect-secrets
        description: Detect secrets in code
        args: [--baseline, .secrets.baseline]
        exclude: |
          (?x)^(
              .*\.lock$|
              .*\.min\.js$|
              .*\.map$|
              tests/fixtures/.*
          )$

  # Python-specific checks
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        name: pyupgrade
        description: Upgrade Python syntax
        args: [--py312-plus]

  # Check for Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort
        description: Sort Python imports
        args: [--profile, black, --check-only, --diff]

  # Validate GitHub Actions workflows
  - repo: https://github.com/rhysd/actionlint
    rev: v1.6.26
    hooks:
      - id: actionlint
        name: actionlint
        description: Lint GitHub Actions workflows

  # Check commit message format
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        name: commitizen-check
        description: Check commit message format
        stages: [commit-msg]

# Configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false