[tox]
min_version = 4.0
env_list = 
    py312
    py313
    lint
    type
    security
    coverage
    integration

[testenv]
description = Run unit tests with pytest
package = wheel
wheel_build_env = .pkg
deps = 
    pytest>=8.0.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0.0
    pytest-mock>=3.12.0
    pytest-timeout>=2.1.0
    respx>=0.20.0
commands = 
    pytest {posargs} -m "not integration"

[testenv:py312]
base_name = testenv
description = Run tests with Python 3.12

[testenv:py313]
base_name = testenv
description = Run tests with Python 3.13

[testenv:lint]
description = Run linting checks
skip_install = true
deps = 
    ruff>=0.12.0
commands = 
    ruff check src tests
    ruff format --check src tests

[testenv:format]
description = Format code with ruff
skip_install = true
deps = 
    ruff>=0.12.0
commands = 
    ruff format src tests
    ruff check --fix src tests

[testenv:type]
description = Run type checking with mypy
deps = 
    mypy>=1.8.0
    types-lxml
    types-requests
commands = 
    mypy src

[testenv:security]
description = Run security checks with bandit
deps = 
    bandit[toml]>=1.8.0
commands = 
    bandit -r src -f json -o bandit-report.json
    bandit -r src

[testenv:coverage]
description = Run tests with coverage reporting
deps = 
    {[testenv]deps}
    coverage[toml]>=7.0.0
commands = 
    coverage erase
    pytest --cov=src/mcp_server_anime --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=90
    coverage report --show-missing --fail-under=90

[testenv:integration]
description = Run integration tests
setenv = 
    RUN_INTEGRATION_TESTS = 1
deps = 
    {[testenv]deps}
commands = 
    pytest {posargs} -m integration --tb=short -v

[testenv:docs]
description = Build documentation
deps = 
    sphinx>=7.0.0
    sphinx-rtd-theme>=2.0.0
    myst-parser>=2.0.0
commands = 
    sphinx-build -b html docs docs/_build/html

[testenv:clean]
description = Clean up build artifacts and cache
skip_install = true
deps = 
allowlist_externals = 
    rm
    find
commands = 
    rm -rf build/
    rm -rf dist/
    rm -rf .eggs/
    rm -rf *.egg-info/
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    rm -rf .ruff_cache/
    rm -rf .coverage
    rm -rf htmlcov/
    rm -rf coverage.xml
    rm -rf .tox/
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[testenv:build]
description = Build package
skip_install = true
deps = 
    build>=1.0.0
    twine>=4.0.0
commands = 
    python -m build
    twine check dist/*

[testenv:dev]
description = Development environment with all tools
deps = 
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:security]deps}
    pre-commit>=3.0.0
    ipython>=8.0.0
commands = 
    pre-commit install
    python -c "print('Development environment ready!')"

[gh-actions]
python = 
    3.12: py312, lint, type, security, coverage
    3.13: py313